-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Convert numbers to words in different languages.
--   
--   A package based on Python's num2words package that converts numbers to
--   words in different languages. It contains functions and data types to
--   create a numbers-to-words algorithm for different languages, and
--   converts numbers both to cardinal numbers and ordinal numbers.
@package ordinal
@version 0.6.0.0


-- | A module that defines the typeclasses that are used in the rest of the
--   module. The <a>NumToWord</a> class is the typeclass that is used by
--   all algorithmic conversion tools.
module Text.Numerals.Class

-- | A type class used for num to word algorithms. It maps an
--   <a>Integral</a> type <tt>i</tt> to <a>Text</a>.
class NumToWord a

-- | Convert the given number to a <a>Text</a> object that is the given
--   number in words in <i>cardinal</i> form.
toCardinal :: (NumToWord a, Integral i) => a -> i -> Text

-- | Convert the given number to a <a>Text</a> object that is the given
--   number in words in <i>cardinal</i> form.
toOrdinal :: (NumToWord a, Integral i) => a -> i -> Text

-- | Convert the given number to a <a>Text</a> object that is the given
--   number in words in <i>short cardinal</i> form.
toShortOrdinal :: (NumToWord a, Integral i) => a -> i -> Text

-- | Convert the given number to a <a>Text</a> object that is the given
--   number in words in the given <a>NumberType</a>.
toWords :: (NumToWord a, Integral i) => NumberType -> a -> i -> Text

-- | Convert the given time of the day to text describing that time.
toTimeText :: NumToWord a => a -> TimeOfDay -> Text

-- | Convert the given hours and minutes to text that describes the time.
toTimeText' :: NumToWord a => a -> Int -> Int -> Text

-- | A type class used to split a value, based on the name of a number in a
--   specific language. The value that is used to split, is often,
--   depending on the language, the largest value smaller than the given
--   number.
class ValueSplit a

-- | A function that takes an <a>Integral</a> value, and based on the
--   object splits it with a value and the name of the number in a specific
--   language.
valueSplit :: ValueSplit a => a -> FreeValueSplitter

-- | A data type that specifies the different types of numbers. These can
--   be used to specify the "target format". The <a>Default</a> number type
--   is <a>Cardinal</a>.
data NumberType

-- | <i>Cardinal</i> numbers like one, two, three, etc.
Cardinal :: NumberType

-- | <i>Ordinal</i> numbers like first, second, third, etc.
Ordinal :: NumberType

-- | <i>Short ordinal</i> numbers like 1st, 2nd, 3rd, etc.
ShortOrdinal :: NumberType

-- | A data type used to convert a number into segments. Each segment has
--   an optional division and remainder part, together with a value and the
--   name of that value in a language.
data NumberSegment i
NumberSegment :: MNumberSegment i -> i -> Text -> MNumberSegment i -> NumberSegment i

-- | The optional division part. <a>Nothing</a> if the division is equal to
--   one.
[segmentDivision] :: NumberSegment i -> MNumberSegment i

-- | The value of the given segment.
[segmentValue] :: NumberSegment i -> i

-- | The name of the value of the given segment, in a specific language.
[segmentText] :: NumberSegment i -> Text

-- | The optional remainder part. <a>Nothing</a> if the remainder is equal
--   to zero.
[segmentRemainder] :: NumberSegment i -> MNumberSegment i

-- | A <a>Maybe</a> variant of the <a>NumberSegment</a> data type. This is
--   used since the division part can be one, or the remainder part can be
--   zero.
type MNumberSegment i = Maybe (NumberSegment i)

-- | A data type that describes the state of the minutes within an hour.
data ClockSegment

-- | The number of minutes is zero.
OClock :: ClockSegment

-- | The parameter is the number of minutes past the hour, this is between
--   <tt>1</tt> and <tt>14</tt>.
Past :: Int -> ClockSegment

-- | It is a quarter past the hour.
QuarterPast :: ClockSegment

-- | The parameter is the number of minutes until half, this is between
--   <tt>1</tt> and <tt>14</tt>.
ToHalf :: Int -> ClockSegment

-- | It is half past an hour.
Half :: ClockSegment

-- | The parameter is the number of minutes past half, this is between
--   <tt>1</tt> and <tt>14</tt>.
PastHalf :: Int -> ClockSegment

-- | It is a quarter to an hour.
QuarterTo :: ClockSegment

-- | The parameter is the number of minutes to the next hour, this is
--   between <tt>1</tt> and <tt>14</tt>.
To :: Int -> ClockSegment

-- | A data type that describes the state of the hours within a day.
data DayPart

-- | It is night, this means that it is between <tt>0:00</tt> and
--   <tt>5:59</tt>.
Night :: DayPart

-- | It is morning, this means that it is between <tt>6:00</tt> and
--   <tt>11:59</tt>.
Morning :: DayPart

-- | It is afternoon, this means it is between <tt>12:00</tt> and
--   <tt>17:59</tt>.
Afternoon :: DayPart

-- | It is evening, this means it is between <tt>18:00</tt> and
--   <tt>23:59</tt>.
Evening :: DayPart

-- | A data type that describes the part of the day, and the number of
--   hours on a 12-hour clock.
data DaySegment
DaySegment :: DayPart -> Int -> DaySegment

-- | The part of the day.
[dayPart] :: DaySegment -> DayPart

-- | The number of hours, between <tt>1</tt> and <tt>12</tt> (both
--   inclusive).
[dayHour] :: DaySegment -> Int

-- | Convert the given number of hours to the corresponding <a>DayPart</a>.
toDayPart :: Int -> DayPart

-- | Convert the given number of hours to the corresponding
--   <a>DaySegment</a>.
toDaySegment :: Int -> DaySegment

-- | Convert the given number of minutes to the corresponding
--   <a>ClockSegment</a>.
toClockSegment :: Int -> ClockSegment

-- | Correct the hour to a 12 number segment. The input can be any Int
--   number, whereas the result will be in the <tt>1 .. 12</tt> range.
hourCorrection :: Int -> Int

-- | Convert the current time in the given <a>TimeZone</a> to the time in
--   words with the given <a>NumToWord</a> algorithm.
currentTimeText :: NumToWord a => TimeZone -> a -> IO Text

-- | Convert the current time to the time in words with the given
--   <a>NumToWord</a> algorithm as UTC time.
currentTimeText' :: NumToWord a => a -> IO Text

-- | A type alias for a function that maps a number to a <a>Text</a>
--   object.
type NumberToWords i = i -> Text

-- | A type alias for a <a>NumberToWords</a> function, with a free
--   <a>Integral</a> variable.
type FreeNumberToWords = forall i. Integral i => NumberToWords i

-- | A type alias of a function that is used to merge the names of two
--   numbers according to gramatical rules. The type parameter is the type
--   of the numbers to merge.
type MergerFunction i = i -> i -> Text -> Text -> Text

-- | A type alias of a <a>MergerFunction</a> function with a free
--   <a>Integral</a> variable.
type FreeMergerFunction = forall i. Integral i => MergerFunction i

-- | A type alias of a function that maps a number to a 2-tuple that
--   contains a number and the word for that number. This number is
--   normally the largest number smaller than the given number. In case no
--   name exists for a number smaller than the given one <a>Nothing</a> is
--   returned.
type ValueSplitter i = i -> Maybe (i, Text)

-- | A type alias of a <a>ValueSplitter</a> function, with a free
--   <a>Integral</a> variable.
type FreeValueSplitter = forall i. Integral i => ValueSplitter i

-- | A type alias of a function that converts a number to a
--   <a>NumberSegment</a> for that number.
type NumberSegmenting i = i -> NumberSegment i

-- | The type of a function that converts time to its description. The
--   first two parameters are used to make conversion more convenient.
type ClockText = -- | The 'ClockSegment' that describes the state of minutes within an hour. ClockSegment -> -- | The 'DaySegment' that describes the state of hours within a day. DaySegment -> -- | The number of hours. Int -> -- | The number of minutes. Int -> -- | A 'Text' object that describes the given time. Text
instance GHC.Show.Show i => GHC.Show.Show (Text.Numerals.Class.NumberSegment i)
instance GHC.Read.Read i => GHC.Read.Read (Text.Numerals.Class.NumberSegment i)
instance GHC.Classes.Ord i => GHC.Classes.Ord (Text.Numerals.Class.NumberSegment i)
instance GHC.Generics.Generic1 Text.Numerals.Class.NumberSegment
instance GHC.Generics.Generic (Text.Numerals.Class.NumberSegment i)
instance GHC.Base.Functor Text.Numerals.Class.NumberSegment
instance Data.Foldable.Foldable Text.Numerals.Class.NumberSegment
instance GHC.Classes.Eq i => GHC.Classes.Eq (Text.Numerals.Class.NumberSegment i)
instance Data.Data.Data i => Data.Data.Data (Text.Numerals.Class.NumberSegment i)
instance GHC.Show.Show Text.Numerals.Class.NumberType
instance GHC.Read.Read Text.Numerals.Class.NumberType
instance GHC.Classes.Ord Text.Numerals.Class.NumberType
instance GHC.Generics.Generic Text.Numerals.Class.NumberType
instance GHC.Classes.Eq Text.Numerals.Class.NumberType
instance GHC.Enum.Enum Text.Numerals.Class.NumberType
instance Data.Data.Data Text.Numerals.Class.NumberType
instance GHC.Enum.Bounded Text.Numerals.Class.NumberType
instance GHC.Show.Show Text.Numerals.Class.ClockSegment
instance GHC.Read.Read Text.Numerals.Class.ClockSegment
instance GHC.Classes.Ord Text.Numerals.Class.ClockSegment
instance GHC.Generics.Generic Text.Numerals.Class.ClockSegment
instance GHC.Classes.Eq Text.Numerals.Class.ClockSegment
instance Data.Data.Data Text.Numerals.Class.ClockSegment
instance GHC.Show.Show Text.Numerals.Class.DayPart
instance GHC.Read.Read Text.Numerals.Class.DayPart
instance GHC.Classes.Ord Text.Numerals.Class.DayPart
instance GHC.Generics.Generic Text.Numerals.Class.DayPart
instance GHC.Classes.Eq Text.Numerals.Class.DayPart
instance GHC.Enum.Enum Text.Numerals.Class.DayPart
instance Data.Data.Data Text.Numerals.Class.DayPart
instance GHC.Enum.Bounded Text.Numerals.Class.DayPart
instance GHC.Show.Show Text.Numerals.Class.DaySegment
instance GHC.Read.Read Text.Numerals.Class.DaySegment
instance GHC.Classes.Ord Text.Numerals.Class.DaySegment
instance GHC.Generics.Generic Text.Numerals.Class.DaySegment
instance GHC.Classes.Eq Text.Numerals.Class.DaySegment
instance Data.Data.Data Text.Numerals.Class.DaySegment
instance Test.QuickCheck.Arbitrary.Arbitrary Text.Numerals.Class.DaySegment
instance Control.DeepSeq.NFData Text.Numerals.Class.DaySegment
instance Test.QuickCheck.Arbitrary.Arbitrary Text.Numerals.Class.DayPart
instance Control.DeepSeq.NFData Text.Numerals.Class.DayPart
instance Control.DeepSeq.NFData Text.Numerals.Class.ClockSegment
instance Test.QuickCheck.Arbitrary.Arbitrary Text.Numerals.Class.ClockSegment
instance Test.QuickCheck.Arbitrary.Arbitrary Text.Numerals.Class.NumberType
instance Control.DeepSeq.NFData Text.Numerals.Class.NumberType
instance Data.Default.Class.Default Text.Numerals.Class.NumberType
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (Text.Numerals.Class.NumberSegment a)
instance Control.DeepSeq.NFData1 Text.Numerals.Class.NumberSegment
instance Test.QuickCheck.Arbitrary.Arbitrary1 Text.Numerals.Class.NumberSegment
instance Test.QuickCheck.Arbitrary.Arbitrary i => Test.QuickCheck.Arbitrary.Arbitrary (Text.Numerals.Class.NumberSegment i)


-- | The module is designed to construct an <a>Exp</a> based on the mapping
--   data provided. It will check if the text object ends with the given
--   suffix, and replace the suffix with another suffix. It aims to compile
--   this into an efficient function.
module Text.Numerals.Algorithm.Template

-- | Construct a function with the given name that maps suffixes in the
--   first item of the 2-tuples to the second item of the 2-tuples. It
--   turns this into a declaration.
ordinizeFromDict :: String -> [(String, String)] -> Name -> [Dec]


-- | A module that defines <i>Latin</i> prefixes. These prefixes are used
--   to construct names for the <i>long</i> and <i>short scales</i>. So the
--   <i>m</i>, <i>b</i>, <i>tr</i> in <i>million</i>, <i>billion</i>,
--   <i>trillion</i>.
module Text.Numerals.Prefix

-- | The <i>Latin</i> prefixes in a <a>Vector</a> for <i>O(1)</i> lookup.
latinPrefixes :: Vector Text

-- | A list of <i>Latin</i> prefixes, used for the <i>long</i> and <i>short
--   scale</i>.
latinPrefixes' :: [Text]

-- | Lookup the given <i>Latin</i> prefix for the given value.
latinPrefix :: Integral i => i -> Maybe Text


-- | A module that contains data types and functions to automatically
--   convert a number to words. It has tooling for a
--   <a>NumeralsAlgorithm</a> as well as a <a>HighNumberAlgorithm</a> that
--   is used to generate a <a>ShortScale</a> or <a>LongScale</a>.
module Text.Numerals.Algorithm

-- | A data type for algorithmic number to word conversions. Most western
--   languages <i>likely</i> can work with this data type.
data NumeralsAlgorithm

-- | A <i>smart constructor</i> for the <a>NumeralsAlgorithm</a> type. This
--   constructor allows one to use an arbitrary <a>Foldable</a> type for
--   the low words and mid words. It will also order the midwords
--   accordingly.
numeralsAlgorithm :: (Foldable f, Foldable g) => Text -> Text -> Text -> f Text -> g (Integer, Text) -> FreeValueSplitter -> FreeMergerFunction -> (Text -> Text) -> FreeNumberToWords -> ClockText -> NumeralsAlgorithm

-- | A data type used for to map larger numbers to words. This data type
--   supports the <i>short scale</i> and <i>long scale</i> with
--   <i>Latin</i> prefixes, and custom suffixes. The <a>Default</a> value
--   is the <i>short scale</i> with <i>illion</i> as suffix. This is used
--   in <i>English</i> for large numbers.
data HighNumberAlgorithm
ShortScale :: Text -> HighNumberAlgorithm
LongScale :: Text -> Text -> HighNumberAlgorithm

-- | Construct a <a>FreeValueSplitter</a> function for the given suffix for
--   a <i>short scale</i>.
shortScale :: Text -> FreeValueSplitter

-- | Construct a <a>FreeValueSplitter</a> function for the given suffixes
--   for a <i>long scale</i>.
longScale :: Text -> Text -> FreeValueSplitter

-- | Construct a <a>FreeValueSplitter</a> function for the given suffix for
--   a <i>short scale</i>, the names are written in <i>title case</i>.
shortScaleTitle :: Text -> FreeValueSplitter

-- | Construct a <a>FreeValueSplitter</a> function for the given suffixes
--   for a <i>long scale</i>, the names are written in <i>title case</i>.
longScaleTitle :: Text -> Text -> FreeValueSplitter

-- | Generate a <i>value splitter</i> for a <a>HighNumberAlgorithm</a> but
--   where the result is post-processed by a function.
valueSplit' :: (Text -> Text) -> HighNumberAlgorithm -> FreeValueSplitter

-- | Convert the given number to a <a>NumberSegment</a> with the given
--   <a>Vector</a> of low numbers, the <i>sorted</i> list of mid numbers,
--   and a <a>FreeValueSplitter</a> for large numbers.
toSegments :: Integral i => Vector Text -> [(Integer, Text)] -> ValueSplitter i -> NumberSegmenting i

-- | Convert the given number to a <a>NumberSegment</a> with the given
--   <a>Vector</a> of low numbers. Mid words and large numbers are not
--   taken into account. This is often the next step after the
--   <a>toSegmentMid</a>.
toSegmentLow :: Integral i => Vector Text -> NumberSegmenting i

-- | Convert the given number to a <a>NumberSegment</a> with the given
--   <a>Vector</a> of low numbers, and the <i>sorted</i> list of mid
--   numbers. Large numbers are not taken into account. This is often the
--   next step after the <a>toSegmentHigh</a>.
toSegmentMid :: Integral i => Vector Text -> [(Integer, Text)] -> NumberSegmenting i

-- | Convert the given number to a <a>NumberSegment</a> with the given
--   <a>Vector</a> of low numbers, the <i>sorted</i> list of mid numbers,
--   and a <a>FreeValueSplitter</a> for large numbers.
toSegmentHigh :: Integral i => Vector Text -> [(Integer, Text)] -> ValueSplitter i -> NumberSegmenting i

-- | Use the given <a>MergerFunction</a> to compress the
--   <a>NumberSegment</a> to a single <a>Text</a> object that represents
--   the given number.
compressSegments :: Integral i => Text -> MergerFunction i -> NumberSegment i -> Text
instance GHC.Show.Show Text.Numerals.Algorithm.HighNumberAlgorithm
instance GHC.Read.Read Text.Numerals.Algorithm.HighNumberAlgorithm
instance GHC.Classes.Ord Text.Numerals.Algorithm.HighNumberAlgorithm
instance GHC.Generics.Generic Text.Numerals.Algorithm.HighNumberAlgorithm
instance GHC.Classes.Eq Text.Numerals.Algorithm.HighNumberAlgorithm
instance Data.Data.Data Text.Numerals.Algorithm.HighNumberAlgorithm
instance Control.DeepSeq.NFData Text.Numerals.Algorithm.HighNumberAlgorithm
instance Test.QuickCheck.Arbitrary.Arbitrary Text.Numerals.Algorithm.HighNumberAlgorithm
instance Data.Default.Class.Default Text.Numerals.Algorithm.HighNumberAlgorithm
instance Text.Numerals.Class.ValueSplit Text.Numerals.Algorithm.HighNumberAlgorithm
instance Text.Numerals.Class.NumToWord Text.Numerals.Algorithm.NumeralsAlgorithm


-- | This module contains logic to convert numbers to words in the
--   <i>German</i> language.
module Text.Numerals.Languages.German

-- | A <a>NumeralsAlgorithm</a> to convert numbers to words in the
--   <i>German</i> language.
german :: NumeralsAlgorithm

-- | Convert numers to their cardinal counterpart in <i>German</i>.
toCardinal' :: Integral i => i -> Text

-- | A function that converts a number in words in <i>cardinal</i> form to
--   <i>ordinal</i> form according to the <i>German</i> language rules.
ordinize' :: Text -> Text

-- | The words used to mark a negative number in the <i>German</i>
--   language.
negativeWord' :: Text

-- | The word used for the number <i>zero</i> in the <i>German</i>
--   language.
zeroWord' :: Text

-- | The word used for the number <i>one</i> in the <i>German</i> language.
oneWord' :: Text

-- | A <a>Vector</a> that contains the word used for the numbers <i>two</i>
--   to <i>twenty</i> in the <i>German</i> language.
lowWords' :: Vector Text

-- | A list of 2-tuples that contains the names of values between
--   <i>thirty</i> and <i>thousand</i> in the <i>German</i> language.
midWords' :: [(Integer, Text)]

-- | An algorithm to obtain the names of <i>large</i> numbers (one million
--   or larger) in <i>German</i>. German uses a <i>long scale</i> with the
--   <tt>illion</tt> and <tt>illiard</tt> suffixes.
highWords' :: HighNumberAlgorithm

-- | A merge function that is used to combine the names of words together
--   to larger words, according to the <i>German</i> grammar rules.
merge' :: FreeMergerFunction


-- | This module contains logic to convert numbers to words in the
--   <i>French</i> language.
module Text.Numerals.Languages.French

-- | A <a>NumeralsAlgorithm</a> to convert numbers to words in the
--   <i>French</i> language.
french :: NumeralsAlgorithm

-- | Convert numers to their cardinal counterpart in <i>French</i>.
toCardinal' :: Integral i => i -> Text

-- | A function that converts a number in words in <i>cardinal</i> form to
--   <i>ordinal</i> form according to the <i>French</i> language rules.
ordinize' :: Text -> Text

-- | The words used to mark a negative number in the <i>French</i>
--   language.
negativeWord' :: Text

-- | The word used for the number <i>zero</i> in the <i>French</i>
--   language.
zeroWord' :: Text

-- | The word used for the number <i>one</i> in the <i>French</i> language.
oneWord' :: Text

-- | A <a>Vector</a> that contains the word used for the numbers <i>two</i>
--   to <i>twenty</i> in the <i>French</i> language.
lowWords' :: Vector Text

-- | A list of 2-tuples that contains the names of values between
--   <i>thirty</i> and <i>thousand</i> in the <i>French</i> language.
midWords' :: [(Integer, Text)]

-- | An algorithm to obtain the names of <i>large</i> numbers (one million
--   or larger) in <i>French</i>. French uses a <i>long scale</i> with the
--   <tt>illion</tt> and <tt>illiard</tt> suffixes.
highWords' :: HighNumberAlgorithm

-- | A merge function that is used to combine the names of words together
--   to larger words, according to the <i>French</i> grammar rules.
merge' :: FreeMergerFunction


-- | This module contains logic to convert numbers to words in the
--   <i>English</i> language.
module Text.Numerals.Languages.English

-- | A <a>NumeralsAlgorithm</a> to convert numbers to words in the
--   <i>English</i> language.
english :: NumeralsAlgorithm

-- | Convert numers to their cardinal counterpart in <i>English</i>.
toCardinal' :: Integral i => i -> Text

-- | A function that converts a number in words in <i>cardinal</i> form to
--   <i>ordinal</i> form according to the <i>English</i> language rules.
ordinize' :: Text -> Text

-- | The words used to mark a negative number in the <i>English</i>
--   language.
negativeWord' :: Text

-- | The word used for the number <i>zero</i> in the <i>English</i>
--   language.
zeroWord' :: Text

-- | The word used for the number <i>one</i> in the <i>English</i>
--   language.
oneWord' :: Text

-- | A <a>Vector</a> that contains the word used for the numbers <i>two</i>
--   to <i>twenty</i> in the <i>English</i> language.
lowWords' :: Vector Text

-- | A list of 2-tuples that contains the names of values between
--   <i>thirty</i> and <i>thousand</i> in the <i>English</i> language.
midWords' :: [(Integer, Text)]

-- | An algorithm to obtain the names of <i>large</i> numbers (one million
--   or larger) in <i>English</i>. English uses a <i>short scale</i> with
--   the <tt>illion</tt> suffix.
highWords' :: HighNumberAlgorithm

-- | A merge function that is used to combine the names of words together
--   to larger words, according to the <i>English</i> grammar rules.
merge' :: Integral i => i -> i -> Text -> Text -> Text
instance Data.Default.Class.Default Text.Numerals.Algorithm.NumeralsAlgorithm


-- | This module contains logic to convert numbers to words in the
--   <i>Dutch</i> language.
module Text.Numerals.Languages.Dutch

-- | A <a>NumeralsAlgorithm</a> to convert numbers to words in the
--   <i>Dutch</i> language.
dutch :: NumeralsAlgorithm

-- | Convert numers to their cardinal counterpart in <i>Dutch</i>.
toCardinal' :: Integral i => i -> Text

-- | A function that converts a number in words in <i>cardinal</i> form to
--   <i>ordinal</i> form according to the <i>Dutch</i> language rules.
ordinize' :: Text -> Text

-- | The words used to mark a negative number in the <i>Dutch</i> language.
negativeWord' :: Text

-- | The word used for the number <i>zero</i> in the <i>Dutch</i> language.
zeroWord' :: Text

-- | The word used for the number <i>one</i> in the <i>Dutch</i> language.
oneWord' :: Text

-- | A <a>Vector</a> that contains the word used for the numbers <i>two</i>
--   to <i>twenty</i> in the <i>Dutch</i> language.
lowWords' :: Vector Text

-- | A list of 2-tuples that contains the names of values between
--   <i>thirty</i> and <i>thousand</i> in the <i>Dutch</i> language.
midWords' :: [(Integer, Text)]

-- | An algorithm to obtain the names of <i>large</i> numbers (one million
--   or larger) in <i>Dutch</i>. Dutch uses a <i>long scale</i> with the
--   <tt>iljoen</tt> and <tt>iljard</tt> suffixes.
highWords' :: HighNumberAlgorithm

-- | A merge function that is used to combine the names of words together
--   to larger words, according to the <i>Dutch</i> grammar rules.
merge' :: Integral i => i -> i -> Text -> Text -> Text


-- | This module imports the <i>num to word</i> algorithms and re-exports
--   these algorithms. The module thus can be used to conveniently import
--   algorithms for all supported languages.
module Text.Numerals.Languages

-- | A <a>NumeralsAlgorithm</a> to convert numbers to words in the
--   <i>Dutch</i> language.
dutch :: NumeralsAlgorithm

-- | A <a>NumeralsAlgorithm</a> to convert numbers to words in the
--   <i>English</i> language.
english :: NumeralsAlgorithm

-- | A <a>NumeralsAlgorithm</a> to convert numbers to words in the
--   <i>French</i> language.
french :: NumeralsAlgorithm

-- | A <a>NumeralsAlgorithm</a> to convert numbers to words in the
--   <i>German</i> language.
german :: NumeralsAlgorithm


-- | The main module of the <tt>ordinal</tt> package. This module
--   re-exports the most important modules of the package to convert
--   numbers to words in the supported languages and functions to construct
--   algorithmic transformations.
module Text.Numerals
